# File specifying the step by step process description for all the screenshots present in this folder. 

# 1st Step- VPC-map.png 
Three tier application architecture design, showing 2 public subnets connected via public route tables to IGW (internet gateway) and 
isolated 2 application private subnets and 2 database private subnets connected via private route tables to NAT (NAT gateway) in 2 availability zones (ap-south-1a & ap-south-1b).

# 2nd Step- Subnets with CIDR.png
Showing all the subnet made along with their respective CIDRs. 

# 3rd Step- IGW.png
Internet Gateway attached to the VPC for the internet access to public subnets.

# 4th Step- RDS Aurora mySQL.png
Utilised Amazon Aurora MySQL in a multi-AZ setup for high availability and automatic failover, ensuring the database is always accessible even in the event of an AZ failure.
Configured a primary Aurora instance with a read replica in a different AZ to ensure redundancy, enhance read scalability, and provide failover support in case of instance failure.

# 5th Step- Autoscaling EC2.png
Implemented an Auto Scaling Group (ASG) with Launch Template (LT) to automatically scale up & down EC2 instances based on real-time user traffic demands, 
optimising both performance and cost-efficiency.

# 6th Step- Load Balancing.png
Application Load Balancer (ALB) to efficiently manage incoming user traffic and distribute it across the application layer, 
ensuring fault tolerance and seamless scaling across multiple Availability Zones (AZs) in the ap-south-1 region.

# 7th Step- Bastion hosting.png
Created Bastion server in public subnet to access private instances for deploying Nginx on the application layer and tested it by updating necessary dependencies & packages. 
This will ensure effective load balancing, reverse proxying and caching, initiate fast and efficient request handling.

# 8th Step- Nginx page.png
